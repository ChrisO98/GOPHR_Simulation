<?xml version="1.0"?>
<launch>

    <!-- Gazebo Launch -->
    <!-- these are the arguments you can pass this launch file, for example paused:=true -->
    <arg name="paused" default="false"/>
    <arg name="use_sim_time" default="true"/>
    <arg name="gui" default="true"/>
    <arg name="headless" default="false"/>
    <arg name="debug" default="false"/>
    <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
      <arg name="world_name" value="$(find gophr)/worlds/map1.sdf"/>
      <arg name="debug" value="$(arg debug)" />
      <arg name="gui" value="$(arg gui)" />
      <arg name="paused" value="$(arg paused)"/>
      <arg name="use_sim_time" value="$(arg use_sim_time)"/>
      <arg name="headless" value="$(arg headless)"/>
    </include>

    <!-- Load the URDF into the ROS Parameter Server --> <!-- stays on -->
    <param name="robot_description" command="$(find xacro)/xacro '$(find gophr)/urdf/gophr_robot.xacro'" />
    <param name="use_gui" value="$(arg gui)"/>
    <!--<param name="robot_description" command="$(find xacro)/xacro '$(find gophr)/urdf/new_robot.urdf.xacro'" />-->

    <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
    <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen" args="-urdf -model gophr_robot -param robot_description"/>
  
    <!--<node if="$(arg gui)" name="joint_state_publisher" pkg="joint_state_publisher_gui" type="joint_state_publisher_gui" />
    <node unless="$(arg gui)" name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />-->
    <!--<node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />-->
    
    <!-- Load joint controller configurations from YAML file to parameter server -->
    <rosparam file="$(find gophr)/config/gophr_control.yaml" command="load"/>
    <!-- load the controllers -->
    <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
	output="screen" ns="/gophr" args="joint_state_controller
					  front_right_wheel_velocity_controller
					  front_left_wheel_velocity_controller
					  back_right_wheel_velocity_controller
					  back_left_wheel_velocity_controller"/>
    
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen">
        <param name="publish_frequency" type="double" value="50.0" />
        <remap from="/joint_states" to="/gophr/joint_states" /> <!-- this line is very important for visualization in RVIZ when used in conjunction with Gazebo (because of the namespace change) -->
    </node>

		<!-- Load robot description and start state publisher OLD MODEL -->
    <!--<param name="robot_description" textfile="$(find cartographer)/urdf/new_robot.urdf.xacro" />--> <!-- old robot file -->
    <!--<node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />-->
		
		<!-- Start RPLIDAR sensor node which provides LaserScan data  --> <!-- actual Lidar -->
    <!--<node name="rplidarNode" pkg="rplidar_ros" type="rplidarNode" output="screen">
        <param name="serial_port" type="string" value="/dev/ttyUSB0"/>
        <param name="serial_baudrate" type="int" value="115200"/>
        <param name="frame_id" type="string" value="laser"/>
        <param name="inverted" type="bool" value="false"/>
        <param name="angle_compensate" type="bool" value="true"/>
    </node>-->
		
		<!-- Start Google Cartographer node with custom configuration file-->
    <node name="cartographer_node" pkg="cartographer_ros" type="cartographer_node" args="
          -configuration_directory $(find gophr)/config
          -configuration_basename robot.lua" output="screen">
        <remap from="scan" to="/scan" />
    </node>
    
    <node pkg="rviz" type="rviz" name="rviz" args="-d $(find gophr)/rviz/gophr_rviz.rviz"/>

    <!-- Additional node which converts Cartographer map into ROS occupancy grid map. Not used and can be skipped in this case -->
    <node name="cartographer_occupancy_grid_node" pkg="cartographer_ros" type="cartographer_occupancy_grid_node" args="-resolution 0.05" />
    
    <!--<node name="node_select" pkg="gophr" type="nodeSelection_1.py" />
    <node name="waypoint_create" pkg="gophr" type="waypointCreation_2.py" />
    <node name="navigate_to_goal" pkg="gophr" type="navigateToGoals_3.py" /> --> <!-- publishes to topic /move_base/goal -->
    
    <!--<node name="gophr_move_node" pkg="gophr" type="gophr_move_node" />--> <!-- move base-->
    <!-- name and type must be the same for cpp to complie and execute, they will match with the same name that the CMakeLists.txt has for add_executable(gophr_move_node src/move_robot.cpp ${GOPHR_SRC}) and target_link_libraries(gophr_move_node ${catkin_LIBRARIES}) -->
    
</launch>
